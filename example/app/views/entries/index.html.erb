<h1>Example filepickerio-rails usage</h1>

<h2>File Helper _tag methods</h2>
<p>These are simple methods to render an input to the screen.</p>

<h3>Filepicker.io upload inputs</h3>
<h4>Basic</h4>

<p>
  <code>&lt;%= fp_file_field_tag :entry, "Pick file to upload", 'value.jpg', class: 'btn' %&gt;</code>
</p>
<p>Renders: <code><%= CGI.unescapeHTML fp_file_field_tag :entry, "Pick file to upload", 'value.jpg', class: 'btn' %></code></p>

<p>
	<%= fp_file_field_tag :entry, "Pick file to upload", 'value.jpg', class: 'btn' %>
</p>

<h4>With drag-n-drop</h4>

<p>
  <code>&lt;%= fp_file_field_tag :entry, dragdrop: true %&gt;</code>
</p>
<p>Renders: <code><%= CGI.unescapeHTML fp_file_field_tag :entry, dragdrop: true %></code></p>

<%= fp_file_field_tag :entry, dragdrop: true %>

<h3>Filepicker.io save button</h3>
<p>Filepicker.io allows you to define a button which when clicked saves the button's value (a URL) to your computer or web storage service (via Filepicker.io).</p>

<p>
  Renders: <code><%= CGI.unescapeHTML fp_save_button_tag "Save to Dropbox", "http://www.filepicker.io/static/img/success.png", "image/jpeg", data: { "fp-option-services" => "DROPBOX", 'fp-url' => 'foobar' } %></code>
</p>
<%= fp_save_button_tag "Save to Dropbox", "http://www.filepicker.io/static/img/success.png", "image/jpg", data: { "fp-option-services" => "DROPBOX" } %>

<h2>Form Builder methods</h2>

<%= form_for @entry do |f| %>
  
  <%
  s = %q{f.fp_file_field :image_url, "Select file", data: { 'fp-mimetypes' => 'image/jpeg' }}
  field = capture { eval s }
  %>
  <p>
    <code><%= raw "&lt;%= #{s} %&gt;" %></code>
  </p>
  <p>
    Renders: <code><%= CGI.unescapeHTML field %></code>
  </p>
  <p>
    <%= field %>
  </p>

  <%
  s = %q{f.fp_save_button :image_url, "Save file to cloud", 'image/jpeg'}
  field = capture { eval s }
  %>
  <p>
    <code><%= raw "&lt;%= #{s} %&gt;" %></code>
  </p>
  <p>
    Renders: <code><%= CGI.unescapeHTML field %></code>
  </p>
  <p>
    <%= field %>
  </p>


  <%= f.submit %>
<%- end %>